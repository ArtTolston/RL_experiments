arr = [-1, 2, 4, 6, -14, 2, 4, 7]

#алгоритм поиска максимального подмассива за линейное время
def find_max_subarray(arr):
	i = 0 # указатель на левый конец наибольшего подмассива с правым концом равным j
	j = 0 # указатель на правый конец подмассива обработанного на данный момент
	i_sum = 0 # сумма наибольшего подмассива A[i .. j], всегда неотрицательна
	max_sum = 0 # максимальная сумма массива
	left = 0 # указатель на левый конец максимального подмассива
	right = 0 # указатель на правый конец максимального подмассива
	length = len(arr) 
	while j < length:
		if j == 0:
			max_sum = arr[0]
			j += 1
			if arr[0] + i_sum < 0:
				i += 1
			else:
				i_sum = arr[0]
		else:
			# если при добавлении элемента i_sum получается меньше нуля значит не нужно добавлять этот элемент в i_sum, но тогда указатель
			# переезжает в самую правую позицию, а сумма обнуляется. 
			if arr[j] + i_sum < 0:
				i = j + 1
				i_sum = 0
				if max_sum < arr[j]:
					max_sum = arr[j]
					left = j
					right = j
			else:
				i_sum += arr[j]
				if max_sum < i_sum: # выбор максимального подмассива происходит здесь
					max_sum = i_sum
					left = i
					right = j
			j += 1
	return left, right

print(find_max_subarray(arr))


